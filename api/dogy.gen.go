// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Healthcheck defines model for healthcheck.
type Healthcheck struct {
	// Message Message if the server is running
	Message string `json:"message"`
}

// HealthcheckV1 defines model for healthcheck.v1.
type HealthcheckV1 struct {
	// Message Message if the endpoint for v1 is running
	Message string `json:"message"`
}

// UsersGetResponse defines model for users.getResponse.
type UsersGetResponse struct {
	// ExternalId Clerk ID of the user
	ExternalId string `json:"externalId"`

	// Gender Gender of the user
	Gender UsersGetResponse_Gender `json:"gender"`

	// HasOnboarded Has the user onboarded?
	HasOnboarded bool `json:"hasOnboarded"`

	// Name User's name
	Name string `json:"name"`

	// Subscription User subscription schema
	Subscription struct {
		IsRegistered     *bool                                          `json:"isRegistered,omitempty"`
		IsTrialMode      *bool                                          `json:"isTrialMode,omitempty"`
		SubscriptionType UsersGetResponse_Subscription_SubscriptionType `json:"subscriptionType"`
		TrialStartDate   string                                         `json:"trialStartDate"`
	} `json:"subscription"`

	// Timezone User's timezone
	Timezone string `json:"timezone"`
}

// UsersGetResponseGender0 defines model for .
type UsersGetResponseGender0 = string

// UsersGetResponseGender1 defines model for .
type UsersGetResponseGender1 = string

// UsersGetResponse_Gender Gender of the user
type UsersGetResponse_Gender struct {
	union json.RawMessage
}

// UsersGetResponseSubscriptionSubscriptionType0 defines model for .
type UsersGetResponseSubscriptionSubscriptionType0 = string

// UsersGetResponseSubscriptionSubscriptionType1 defines model for .
type UsersGetResponseSubscriptionSubscriptionType1 = string

// UsersGetResponseSubscriptionSubscriptionType2 defines model for .
type UsersGetResponseSubscriptionSubscriptionType2 = string

// UsersGetResponse_Subscription_SubscriptionType defines model for UsersGetResponse.Subscription.SubscriptionType.
type UsersGetResponse_Subscription_SubscriptionType struct {
	union json.RawMessage
}

// AsUsersGetResponseGender0 returns the union data inside the UsersGetResponse_Gender as a UsersGetResponseGender0
func (t UsersGetResponse_Gender) AsUsersGetResponseGender0() (UsersGetResponseGender0, error) {
	var body UsersGetResponseGender0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersGetResponseGender0 overwrites any union data inside the UsersGetResponse_Gender as the provided UsersGetResponseGender0
func (t *UsersGetResponse_Gender) FromUsersGetResponseGender0(v UsersGetResponseGender0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersGetResponseGender0 performs a merge with any union data inside the UsersGetResponse_Gender, using the provided UsersGetResponseGender0
func (t *UsersGetResponse_Gender) MergeUsersGetResponseGender0(v UsersGetResponseGender0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUsersGetResponseGender1 returns the union data inside the UsersGetResponse_Gender as a UsersGetResponseGender1
func (t UsersGetResponse_Gender) AsUsersGetResponseGender1() (UsersGetResponseGender1, error) {
	var body UsersGetResponseGender1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersGetResponseGender1 overwrites any union data inside the UsersGetResponse_Gender as the provided UsersGetResponseGender1
func (t *UsersGetResponse_Gender) FromUsersGetResponseGender1(v UsersGetResponseGender1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersGetResponseGender1 performs a merge with any union data inside the UsersGetResponse_Gender, using the provided UsersGetResponseGender1
func (t *UsersGetResponse_Gender) MergeUsersGetResponseGender1(v UsersGetResponseGender1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UsersGetResponse_Gender) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UsersGetResponse_Gender) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUsersGetResponseSubscriptionSubscriptionType0 returns the union data inside the UsersGetResponse_Subscription_SubscriptionType as a UsersGetResponseSubscriptionSubscriptionType0
func (t UsersGetResponse_Subscription_SubscriptionType) AsUsersGetResponseSubscriptionSubscriptionType0() (UsersGetResponseSubscriptionSubscriptionType0, error) {
	var body UsersGetResponseSubscriptionSubscriptionType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersGetResponseSubscriptionSubscriptionType0 overwrites any union data inside the UsersGetResponse_Subscription_SubscriptionType as the provided UsersGetResponseSubscriptionSubscriptionType0
func (t *UsersGetResponse_Subscription_SubscriptionType) FromUsersGetResponseSubscriptionSubscriptionType0(v UsersGetResponseSubscriptionSubscriptionType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersGetResponseSubscriptionSubscriptionType0 performs a merge with any union data inside the UsersGetResponse_Subscription_SubscriptionType, using the provided UsersGetResponseSubscriptionSubscriptionType0
func (t *UsersGetResponse_Subscription_SubscriptionType) MergeUsersGetResponseSubscriptionSubscriptionType0(v UsersGetResponseSubscriptionSubscriptionType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUsersGetResponseSubscriptionSubscriptionType1 returns the union data inside the UsersGetResponse_Subscription_SubscriptionType as a UsersGetResponseSubscriptionSubscriptionType1
func (t UsersGetResponse_Subscription_SubscriptionType) AsUsersGetResponseSubscriptionSubscriptionType1() (UsersGetResponseSubscriptionSubscriptionType1, error) {
	var body UsersGetResponseSubscriptionSubscriptionType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersGetResponseSubscriptionSubscriptionType1 overwrites any union data inside the UsersGetResponse_Subscription_SubscriptionType as the provided UsersGetResponseSubscriptionSubscriptionType1
func (t *UsersGetResponse_Subscription_SubscriptionType) FromUsersGetResponseSubscriptionSubscriptionType1(v UsersGetResponseSubscriptionSubscriptionType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersGetResponseSubscriptionSubscriptionType1 performs a merge with any union data inside the UsersGetResponse_Subscription_SubscriptionType, using the provided UsersGetResponseSubscriptionSubscriptionType1
func (t *UsersGetResponse_Subscription_SubscriptionType) MergeUsersGetResponseSubscriptionSubscriptionType1(v UsersGetResponseSubscriptionSubscriptionType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUsersGetResponseSubscriptionSubscriptionType2 returns the union data inside the UsersGetResponse_Subscription_SubscriptionType as a UsersGetResponseSubscriptionSubscriptionType2
func (t UsersGetResponse_Subscription_SubscriptionType) AsUsersGetResponseSubscriptionSubscriptionType2() (UsersGetResponseSubscriptionSubscriptionType2, error) {
	var body UsersGetResponseSubscriptionSubscriptionType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersGetResponseSubscriptionSubscriptionType2 overwrites any union data inside the UsersGetResponse_Subscription_SubscriptionType as the provided UsersGetResponseSubscriptionSubscriptionType2
func (t *UsersGetResponse_Subscription_SubscriptionType) FromUsersGetResponseSubscriptionSubscriptionType2(v UsersGetResponseSubscriptionSubscriptionType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersGetResponseSubscriptionSubscriptionType2 performs a merge with any union data inside the UsersGetResponse_Subscription_SubscriptionType, using the provided UsersGetResponseSubscriptionSubscriptionType2
func (t *UsersGetResponse_Subscription_SubscriptionType) MergeUsersGetResponseSubscriptionSubscriptionType2(v UsersGetResponseSubscriptionSubscriptionType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UsersGetResponse_Subscription_SubscriptionType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UsersGetResponse_Subscription_SubscriptionType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /)
	GetIndex(c *fiber.Ctx) error
	// Health check for v1
	// (GET /api/v1/)
	GetApiV1(c *fiber.Ctx) error
	// Get User by ID
	// (GET /api/v1/users/{id})
	GetApiV1UsersById(c *fiber.Ctx, id string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetIndex operation middleware
func (siw *ServerInterfaceWrapper) GetIndex(c *fiber.Ctx) error {

	return siw.Handler.GetIndex(c)
}

// GetApiV1 operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1(c *fiber.Ctx) error {

	return siw.Handler.GetApiV1(c)
}

// GetApiV1UsersById operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1UsersById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetApiV1UsersById(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/", wrapper.GetIndex)

	router.Get(options.BaseURL+"/api/v1/", wrapper.GetApiV1)

	router.Get(options.BaseURL+"/api/v1/users/:id", wrapper.GetApiV1UsersById)

}
