// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pets.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createBasePet = `-- name: CreateBasePet :one
INSERT INTO pets (name, birthday, photo_url, gender, size, weight) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, created_at, updated_at, name, birthday, photo_url, gender, size, weight
`

type CreateBasePetParams struct {
	Name     string          `json:"name"`
	Birthday time.Time       `json:"birthday"`
	PhotoUrl string          `json:"photoUrl"`
	Gender   Gender          `json:"gender"`
	Size     PetSize         `json:"size"`
	Weight   decimal.Decimal `json:"weight"`
}

func (q *Queries) CreateBasePet(ctx context.Context, arg CreateBasePetParams) (Pet, error) {
	row := q.db.QueryRow(ctx, createBasePet,
		arg.Name,
		arg.Birthday,
		arg.PhotoUrl,
		arg.Gender,
		arg.Size,
		arg.Weight,
	)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Birthday,
		&i.PhotoUrl,
		&i.Gender,
		&i.Size,
		&i.Weight,
	)
	return i, err
}

const createBasePetAttr = `-- name: CreateBasePetAttr :one
INSERT INTO pet_attrs (pet_id, is_sterilized) VALUES ($1, $2) RETURNING id, pet_id, is_sterilized
`

type CreateBasePetAttrParams struct {
	PetID        uuid.UUID `json:"petID"`
	IsSterilized bool      `json:"isSterilized"`
}

func (q *Queries) CreateBasePetAttr(ctx context.Context, arg CreateBasePetAttrParams) (PetAttr, error) {
	row := q.db.QueryRow(ctx, createBasePetAttr, arg.PetID, arg.IsSterilized)
	var i PetAttr
	err := row.Scan(&i.ID, &i.PetID, &i.IsSterilized)
	return i, err
}

const createPetAttrAggressionLevel = `-- name: CreatePetAttrAggressionLevel :exec
INSERT INTO pet_attr_aggression_levels (pet_attr_id, aggression_level) VALUES ($1, $2)
`

type CreatePetAttrAggressionLevelParams struct {
	PetAttrID       uuid.UUID          `json:"petAttrID"`
	AggressionLevel PetAggressionLevel `json:"aggressionLevel"`
}

func (q *Queries) CreatePetAttrAggressionLevel(ctx context.Context, arg CreatePetAttrAggressionLevelParams) error {
	_, err := q.db.Exec(ctx, createPetAttrAggressionLevel, arg.PetAttrID, arg.AggressionLevel)
	return err
}

const createPetAttrAllergy = `-- name: CreatePetAttrAllergy :exec
INSERT INTO pet_attr_allergies (pet_attr_id, allergy) VALUES ($1, $2)
`

type CreatePetAttrAllergyParams struct {
	PetAttrID uuid.UUID  `json:"petAttrID"`
	Allergy   PetAllergy `json:"allergy"`
}

func (q *Queries) CreatePetAttrAllergy(ctx context.Context, arg CreatePetAttrAllergyParams) error {
	_, err := q.db.Exec(ctx, createPetAttrAllergy, arg.PetAttrID, arg.Allergy)
	return err
}

const createPetAttrBehavior = `-- name: CreatePetAttrBehavior :exec
INSERT INTO pet_attr_behaviors (pet_attr_id, behavior) VALUES ($1, $2)
`

type CreatePetAttrBehaviorParams struct {
	PetAttrID uuid.UUID   `json:"petAttrID"`
	Behavior  PetBehavior `json:"behavior"`
}

func (q *Queries) CreatePetAttrBehavior(ctx context.Context, arg CreatePetAttrBehaviorParams) error {
	_, err := q.db.Exec(ctx, createPetAttrBehavior, arg.PetAttrID, arg.Behavior)
	return err
}

const createPetAttrBreed = `-- name: CreatePetAttrBreed :exec
INSERT INTO pet_attr_breeds (pet_attr_id, breed) VALUES ($1, $2)
`

type CreatePetAttrBreedParams struct {
	PetAttrID uuid.UUID `json:"petAttrID"`
	Breed     PetBreed  `json:"breed"`
}

func (q *Queries) CreatePetAttrBreed(ctx context.Context, arg CreatePetAttrBreedParams) error {
	_, err := q.db.Exec(ctx, createPetAttrBreed, arg.PetAttrID, arg.Breed)
	return err
}

const createPetAttrInteractions = `-- name: CreatePetAttrInteractions :exec
INSERT INTO pet_attr_interactions (pet_attr_id, interaction) VALUES ($1, $2)
`

type CreatePetAttrInteractionsParams struct {
	PetAttrID   uuid.UUID      `json:"petAttrID"`
	Interaction PetInteraction `json:"interaction"`
}

func (q *Queries) CreatePetAttrInteractions(ctx context.Context, arg CreatePetAttrInteractionsParams) error {
	_, err := q.db.Exec(ctx, createPetAttrInteractions, arg.PetAttrID, arg.Interaction)
	return err
}

const createPetAttrPersonalities = `-- name: CreatePetAttrPersonalities :exec
INSERT INTO pet_attr_personalities (pet_attr_id, personality) VALUES ($1, $2)
`

type CreatePetAttrPersonalitiesParams struct {
	PetAttrID   uuid.UUID      `json:"petAttrID"`
	Personality PetPersonality `json:"personality"`
}

func (q *Queries) CreatePetAttrPersonalities(ctx context.Context, arg CreatePetAttrPersonalitiesParams) error {
	_, err := q.db.Exec(ctx, createPetAttrPersonalities, arg.PetAttrID, arg.Personality)
	return err
}

const createPetAttrReactivities = `-- name: CreatePetAttrReactivities :exec
INSERT INTO pet_attr_reactivities (pet_attr_id, reactivity) VALUES ($1, $2)
`

type CreatePetAttrReactivitiesParams struct {
	PetAttrID  uuid.UUID     `json:"petAttrID"`
	Reactivity PetReactivity `json:"reactivity"`
}

func (q *Queries) CreatePetAttrReactivities(ctx context.Context, arg CreatePetAttrReactivitiesParams) error {
	_, err := q.db.Exec(ctx, createPetAttrReactivities, arg.PetAttrID, arg.Reactivity)
	return err
}

const linkPetToUser = `-- name: LinkPetToUser :exec
INSERT INTO users_pets_link (pet_id, user_id, is_dog_owner, is_dog_sitter) VALUES ($1, $2, $3, $4)
`

type LinkPetToUserParams struct {
	PetID       uuid.UUID `json:"petID"`
	UserID      uuid.UUID `json:"userID"`
	IsDogOwner  bool      `json:"isDogOwner"`
	IsDogSitter bool      `json:"isDogSitter"`
}

func (q *Queries) LinkPetToUser(ctx context.Context, arg LinkPetToUserParams) error {
	_, err := q.db.Exec(ctx, linkPetToUser,
		arg.PetID,
		arg.UserID,
		arg.IsDogOwner,
		arg.IsDogSitter,
	)
	return err
}
